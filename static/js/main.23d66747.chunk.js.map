{"version":3,"sources":["Components/Theme.js","Components/App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","regex","initialState","isFetching","skinData","setIds","App","props","state","fetchData","bind","weaponCard","saveJson","this","axios","get","then","resp","setState","data","e","skinSave","i","weapons","length","weapon","skinfield","document","getElementById","id","value","wearfield","parseFloat","seedfield","parseInt","stattrak","checked","ct","t","matchSkinId","match","skinElement","push","a","createElement","file","Blob","JSON","stringify","href","URL","createObjectURL","download","click","name","img","Grid","key","item","Card","CardContent","Typography","color","gutterBottom","style","target","rel","CardActions","container","direction","spacing","xs","FormControlLabel","control","Checkbox","defaultChecked","inputProps","label","height","width","src","alt","TextField","fullWidth","defaultValue","variant","Autocomplete","options","getOptionLabel","option","renderInput","params","justify","alignItems","size","loading","weaponCards","map","Container","maxWidth","component","Button","onClick","className","role","aria-label","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.23d66747.chunk.js","sourcesContent":["import  { createMuiTheme } from '@material-ui/core';\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n    },\r\n    \r\n});","import React, { Component } from 'react'\r\nimport axios from \"axios\";\r\nimport weapons from \"../assets/data/weapons.json\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst ITEM_INDEX = \"https://raw.githubusercontent.com/bay0/CSGO-skin-ID-dumper/master/item_index.json\";\r\nconst CSGO_STASH = \"https://csgostash.com/weapon/\";\r\nconst regex = /(\\d+)[^-]*$/gm;\r\n\r\nconst initialState = {\r\n  isFetching: true,\r\n  skinData: [],\r\n  setIds: [],\r\n};\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n\r\n    this.fetchData = this.fetchData.bind(this);\r\n    this.weaponCard = this.weaponCard.bind(this);\r\n    this.saveJson = this.saveJson.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.fetchData();\r\n  }\r\n\r\n  fetchData() {\r\n    return axios.get(ITEM_INDEX)\r\n      .then(resp => this.setState({\r\n        isFetching: false,\r\n        skinData: resp.data\r\n      }));\r\n  }\r\n\r\n  async saveJson(e) {\r\n    let skinSave = {\r\n      \"CT\": {\r\n        \"Skins\": []\r\n      },\r\n      \"T\": {\r\n        \"Skins\": []\r\n      }\r\n    };\r\n\r\n    for(let i = 0; i < weapons.length; i++) {\r\n      const weapon = weapons[i];\r\n      const skinfield = document.getElementById(`${weapon.id}-skin-field`).value;\r\n      const wearfield = parseFloat(document.getElementById(`${weapon.id}-wear-field`).value);\r\n      const seedfield = parseInt(document.getElementById(`${weapon.id}-seed-field`).value);\r\n      const stattrak = document.getElementById(`${weapon.id}-stattrak-checkbox`).checked;\r\n      const ct = document.getElementById(`${weapon.id}-ct-checkbox`).checked;\r\n      const t = document.getElementById(`${weapon.id}-t-checkbox`).checked;\r\n      if(skinfield !== \"\" && skinfield !== null) {\r\n        let matchSkinId = parseInt(skinfield.match(regex)[0]);\r\n        let skinElement = {\r\n            \"dyn_stattrak\": stattrak,\r\n            \"paintkit\": matchSkinId,\r\n            \"seed\": seedfield,\r\n            \"stattrak\": -1,\r\n            \"weapon\": weapon.id,\r\n            \"wear\": wearfield,\r\n        }\r\n        if(ct) {\r\n          skinSave[\"CT\"][\"Skins\"].push(skinElement);\r\n        } \r\n        if(t) {\r\n          skinSave[\"T\"][\"Skins\"].push(skinElement);\r\n        }\r\n      }\r\n    }\r\n    var a = document.createElement(\"a\");\r\n    var file = new Blob([JSON.stringify(skinSave, null, 2)], {type: 'application/json'});\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = \"Skins\";\r\n    a.click();\r\n  }\r\n\r\n  weaponCard(id, name, img) {\r\n    return (\r\n      <Grid key={`${id}-grid`} item>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              <a style={{color: 'inherit'}} href={`${CSGO_STASH}${name}`} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a> - {id}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Grid container direction=\"column\" spacing={1}>\r\n              <Grid item container spacing={1}>\r\n                <Grid item container direction=\"column\" xs={6}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={<Checkbox id={`${id}-t-checkbox`} defaultChecked inputProps={{ 'aria-label': 'primary checkbox' }} />}\r\n                      label=\"T\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={<Checkbox id={`${id}-ct-checkbox`} defaultChecked inputProps={{ 'aria-label': 'primary checkbox' }} />}\r\n                      label=\"CT\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={<Checkbox id={`${id}-stattrak-checkbox`} inputProps={{ 'aria-label': 'primary checkbox' }} />}\r\n                      label=\"StatTrak™\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <img height=\"125\" width=\"125\" src={img} alt={`Weapon - ${name}`} />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField fullWidth id={`${id}-seed-field`} defaultValue=\"0\" label=\"Seed\" variant=\"outlined\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField fullWidth id={`${id}-wear-field`} defaultValue=\"0.00\" label=\"Wear\" variant=\"outlined\" />\r\n              </Grid>\r\n              <Grid item>\r\n              <Autocomplete\r\n                id={`${id}-skin-field`}\r\n                options={this.state.skinData}\r\n                style={{ width: 300 }}\r\n                getOptionLabel={(option) => `${option.name} - ${option.id}`}\r\n                renderInput={(params) => <TextField {...params} label=\"Skin\" variant=\"outlined\" />}\r\n              />\r\n              </Grid>\r\n            </Grid>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { isFetching } = this.state;\r\n\r\n    if(isFetching) {\r\n      return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <PacmanLoader\r\n              size={150}\r\n              color={\"#123abc\"}\r\n              loading={isFetching}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }\r\n\r\n    let weaponCards = weapons.map(weapon => {\r\n      return this.weaponCard(weapon.id, weapon.name, weapon.img);\r\n    })\r\n\r\n    return (\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container alignItems=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\r\n              ev0-skin-gen\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button onClick={this.saveJson} variant=\"contained\" color=\"primary\" className=\"save-button\">\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography>\r\n              Made with <span role=\"img\" aria-label=\"heart\">❤️</span> by bay\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <PacmanLoader size={10} color={\"#123abc\"} loading={true} />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n          {weaponCards}\r\n        </Grid>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/sass/index.sass';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport  { CssBaseline } from '@material-ui/core';\r\nimport { theme } from './Components/Theme';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}