{"version":3,"sources":["Components/Theme.js","Components/App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","typography","regex","initialState","isFetching","skinData","setIds","App","props","state","fetchData","bind","weaponCard","saveJson","this","axios","get","then","resp","setState","data","e","skinSave","i","weapons","length","weapon","skinfield","document","getElementById","id","value","stattrak","checked","matchSkinId","match","skinElement","parseInt","push","a","createElement","file","Blob","JSON","stringify","href","URL","createObjectURL","download","click","name","Grid","key","item","Card","CardContent","Typography","color","gutterBottom","CardActions","container","direction","spacing","Checkbox","inputProps","Autocomplete","options","style","width","getOptionLabel","option","renderInput","params","TextField","label","variant","justify","alignItems","size","loading","weaponCards","map","Container","maxWidth","component","Button","onClick","className","aria-label","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.caa59b20.chunk.js","sourcesContent":["import  { createMuiTheme } from '@material-ui/core';\n\nexport const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n    typography: {\n        \"fontFamily\": \"SFProDisplay-BlackItalic\",\n        \"fontSize\": 20,\n        \"fontWeightLight\": 300,\n        \"fontWeightRegular\": 400,\n        \"fontWeightMedium\": 500\n    }\n});","import React, { Component } from 'react'\nimport axios from \"axios\";\nimport weapons from \"../assets/data/weapons.json\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\n\nconst ITEM_INDEX = \"https://raw.githubusercontent.com/bay0/CSGO-skin-ID-dumper/master/item_index.json\";\nconst regex = /(\\d+)[^-]*$/gm;\n\nconst initialState = {\n  isFetching: true,\n  skinData: [],\n  setIds: [],\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.fetchData = this.fetchData.bind(this);\n    this.weaponCard = this.weaponCard.bind(this);\n    this.saveJson = this.saveJson.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.fetchData();\n  }\n\n  fetchData() {\n    return axios.get(ITEM_INDEX)\n      .then(resp => this.setState({\n        isFetching: false,\n        skinData: resp.data\n      }));\n  }\n\n  async saveJson(e) {\n    let skinSave = {\n      \"CT\": {\n        \"Skins\": []\n      },\n      \"T\": {\n        \"Skins\": []\n      }\n    };\n\n    for(let i = 0; i < weapons.length; i++) {\n      const weapon = weapons[i];\n      const skinfield = document.getElementById(`${weapon.id}-skin-field`).value;\n      const stattrak = document.getElementById(`${weapon.id}-stattrak-checkbox`).checked;\n      if(skinfield !== \"\" && skinfield !== null) {\n        let matchSkinId = skinfield.match(regex)[0]\n        let skinElement = {\n            \"dyn_stattrak\": stattrak,\n            \"paintkit\": parseInt(matchSkinId[0]),\n            \"seed\": 0,\n            \"stattrak\": -1,\n            \"weapon\": weapon.id,\n            \"wear\": 0.009999999776482582\n        }\n        skinSave[\"CT\"][\"Skins\"].push(skinElement);\n        skinSave[\"T\"][\"Skins\"].push(skinElement);\n      }\n    }\n    var a = document.createElement(\"a\");\n    var file = new Blob([JSON.stringify(skinSave, null, 2)], {type: 'application/json'});\n    a.href = URL.createObjectURL(file);\n    a.download = \"Skins\";\n    a.click();\n  }\n\n  weaponCard(id, name) {\n    return (\n      <Grid key={`${id}-grid`} item>\n        <Card>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {name} - {id}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Grid container direction=\"column\" spacing={1}>\n              {/* <Grid item>\n                <TextField label=\"Wear\" variant=\"outlined\" />\n              </Grid> */}\n              <Grid item>\n                StatTrakâ„¢\n                <Checkbox\n                  id={`${id}-stattrak-checkbox`}\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n                />\n              </Grid>\n              <Grid item>\n              <Autocomplete\n                id={`${id}-skin-field`}\n                options={this.state.skinData}\n                style={{ width: 300 }}\n                getOptionLabel={(option) => `${option.name} - ${option.id}`}\n                renderInput={(params) => <TextField {...params} label=\"Skin\" variant=\"outlined\" />}\n              />\n              </Grid>\n            </Grid>\n          </CardActions>\n        </Card>\n      </Grid>\n    )\n  }\n\n  render() {\n    const { isFetching } = this.state;\n\n    if(isFetching) {\n      return (\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n          <Grid item>\n            <PacmanLoader\n              size={150}\n              color={\"#123abc\"}\n              loading={isFetching}\n            />\n          </Grid>\n        </Grid>\n      )\n    }\n\n    let weaponCards = weapons.map(weapon => {\n      return this.weaponCard(weapon.id, weapon.name);\n    })\n\n    return (\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={2}>\n          <Grid item>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n              ev0-skin-gen\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button onClick={this.saveJson} color=\"primary\" className=\"save-button\" aria-label=\"edit\">\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n          {weaponCards}\n        </Grid>\n      </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/sass/index.sass';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport  { CssBaseline } from '@material-ui/core';\nimport { theme } from './Components/Theme';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}